solidity는 스마트 컨트렉트를 활용

스마트 컨트랙트(1994) > 블록체인(1997~1998)

스마트 컨트랙트가 처음 제안되었을 때 구현체가 없었음.

스마트 컨트랙트는 이더리움이 나오면서 처음 사용됨.
2007~8
2012

스마트 컨트랙트 = 블록체인에서 새로운 저장소

비트코인
이더리움
기존에는 수치적인 데이터만을 저장을 하였으나, 다양한 데이터를 저장할 수 있게 됨.
스마트 컨트랙트 개발 => 데이터 베이스에서 테이블을 만드는 것.

결론 : 스마트 컨트랙트는 블록체인에서 데이터를 저장하는 공간.
데이터를 추가 및 수정하기 위해선 트랜젝션이 필요.

컴파일러 = 번역가(번역사)

java, solidity => 프로그래밍 언어(사람이 이해할 수 있는 언어)
↓ 컴파일러
0,1 => 기계어

프로그래밍 버전이 중요함.
함수가 없어졌을 수도 있고, 문법이 변경되었을 수도 있음.
솔리디티 4.2 버전에서 5.0 버전으로 뛸때 많은 변경이 일어난 것임.
commit  버전이 안정적인 버전이고, nightly 버전은 아직 개발중임.


블록체인 : ethereum, bitcoin, eos, hyperledger fabric
서버 : node.js, java, php
디비 : mongodb, mysql, mariadb, redis, oracle
프론트 : html, javascript, css(리엑트, 뷰, 앵귤러), jsp

스마트 컨트랙트 2가지의 구조
    1. 변수를 이용하여 데이터 정의 (데이터 모델링) - 테이블 정의
	계약서 예) 갑(문자열), 을(문자열 -배열), 날짜(1이상의 숫자), 계약 내용(문자열)
    2. 함수를 이용하여 데이터 조작 - 쿼리문 작성
	계약서 생성 - 갑, 을, 날짜, 계약내용 생성 -> 트랜잭션 처리
	계약서 조회
	계약서 만료
	계약서 폐기
	계약서 수정

    배포
	계약서에서 기능을 추가하기 위해 함수를 추가해서 재배포는 불가능. => 이더리움에 대해서만..
	버전 관리가 불가능

변수는 프로그램이 데이터를 저장하는 공간 => 메모리
0x1234569870(주소값) =>대체 변수명
데이터 타입이 다르면 다른 데이터로 취급할 수 있음.

구조체 : 변수안에 여러가지의 데이터 타입을 저장하는 구조 => 새로운 타입 생성

코드 동일 배포
  - 독립적인 컨트랙트
  - 배포 -> 생성 Tx - CA 생성
		- code 생성 ->state 변경 
		- data 생성 -> state 변경